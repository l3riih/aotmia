#!/usr/bin/env python3
"""
Script de prueba para el Servicio Ag√©ntico de Evaluaci√≥n.
Prueba la integraci√≥n completa con el LLM Orchestrator.
"""

import asyncio
import httpx
from typing import Dict, Any
import json
from datetime import datetime


class EvaluationTester:
    def __init__(self):
        self.base_url = "http://localhost:8003"
        self.client = httpx.AsyncClient(timeout=30.0)
        
    async def test_health(self):
        """Prueba el endpoint de health."""
        print("\nüîç Probando Health Check...")
        response = await self.client.get(f"{self.base_url}/api/v1/evaluation/health")
        print(f"Status: {response.status_code}")
        print(f"Response: {json.dumps(response.json(), indent=2)}")
        return response.status_code == 200
    
    async def test_agentic_capabilities(self):
        """Prueba las capacidades ag√©nticas."""
        print("\nü§ñ Verificando Capacidades Ag√©nticas...")
        response = await self.client.get(f"{self.base_url}/api/v1/evaluation/agentic-capabilities")
        print(f"Status: {response.status_code}")
        print(f"Response: {json.dumps(response.json(), indent=2)}")
        return response.status_code == 200
    
    async def test_evaluate_response(self):
        """Prueba la evaluaci√≥n de una respuesta."""
        print("\nüìù Probando Evaluaci√≥n de Respuesta...")
        
        # Datos de prueba
        evaluation_data = {
            "question_id": "math_001",
            "question_text": "¬øQu√© es una funci√≥n lineal y cu√°les son sus caracter√≠sticas principales?",
            "student_answer": "Una funci√≥n lineal es una relaci√≥n matem√°tica donde cada valor de x corresponde a un √∫nico valor de y, y su gr√°fica es una l√≠nea recta. Sus caracter√≠sticas son: tiene la forma y = mx + b, donde m es la pendiente y b es la ordenada al origen.",
            "expected_concepts": ["funci√≥n", "lineal", "pendiente", "ordenada", "gr√°fica", "recta"],
            "difficulty_level": "intermedio",
            "user_id": "test_student_123"
        }
        
        print(f"Enviando evaluaci√≥n: {json.dumps(evaluation_data, indent=2)}")
        
        response = await self.client.post(
            f"{self.base_url}/api/v1/evaluation/evaluate",
            json=evaluation_data
        )
        
        print(f"\nStatus: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            print(f"\n‚úÖ Evaluaci√≥n Exitosa!")
            print(f"ID: {result.get('evaluation_id')}")
            print(f"Score: {result.get('score')}")
            print(f"\nFeedback:")
            feedback = result.get('feedback', {})
            print(f"  - Fortalezas: {feedback.get('strengths')}")
            print(f"  - Mejoras: {feedback.get('improvements')}")
            print(f"  - Sugerencias: {feedback.get('suggestions')}")
            print(f"\nMisconceptions detectados: {result.get('misconceptions_detected')}")
            print(f"\nProgreso de aprendizaje:")
            progress = result.get('learning_progress', {})
            print(f"  - Dominio actual: {progress.get('current_mastery')}")
            print(f"  - Mejora: {progress.get('improvement')}")
            print(f"  - Tendencia: {progress.get('trend')}")
            print(f"\nMetadatos del Agente:")
            agent_meta = result.get('agent_metadata', {})
            print(f"  - Pasos de razonamiento: {len(agent_meta.get('reasoning_steps', []))}")
            print(f"  - Herramientas usadas: {agent_meta.get('tools_used')}")
            print(f"  - Confianza: {agent_meta.get('confidence_score')}")
        else:
            print(f"‚ùå Error: {response.text}")
        
        return response.status_code == 200
    
    async def test_batch_evaluate(self):
        """Prueba la evaluaci√≥n por lotes."""
        print("\nüìö Probando Evaluaci√≥n por Lotes...")
        
        batch_data = {
            "evaluations": [
                {
                    "question_id": "math_002",
                    "question_text": "¬øCu√°l es la derivada de f(x) = x¬≤?",
                    "student_answer": "La derivada es 2x",
                    "expected_concepts": ["derivada", "funci√≥n", "potencia"],
                    "difficulty_level": "intermedio",
                    "user_id": "test_student_123"
                },
                {
                    "question_id": "math_003",
                    "question_text": "¬øQu√© es el teorema de Pit√°goras?",
                    "student_answer": "Es un teorema que dice que en un tri√°ngulo rect√°ngulo, el cuadrado de la hipotenusa es igual a la suma de los cuadrados de los catetos: a¬≤ + b¬≤ = c¬≤",
                    "expected_concepts": ["teorema", "Pit√°goras", "tri√°ngulo", "rect√°ngulo", "hipotenusa", "catetos"],
                    "difficulty_level": "b√°sico",
                    "user_id": "test_student_123"
                }
            ]
        }
        
        response = await self.client.post(
            f"{self.base_url}/api/v1/evaluation/batch-evaluate",
            json=batch_data
        )
        
        print(f"\nStatus: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ Evaluaciones procesadas: {result.get('processed')}")
            print(f"‚ùå Evaluaciones fallidas: {result.get('failed')}")
            
            for idx, evaluation in enumerate(result.get('results', [])):
                print(f"\nEvaluaci√≥n {idx + 1}:")
                print(f"  - Score: {evaluation.get('score')}")
                print(f"  - Feedback: {evaluation.get('feedback', {}).get('strengths', [])[:1]}")
        else:
            print(f"‚ùå Error: {response.text}")
        
        return response.status_code == 200
    
    async def test_get_user_history(self):
        """Prueba obtener el historial de evaluaciones."""
        print("\nüìä Probando Historial de Usuario...")
        
        user_id = "test_student_123"
        response = await self.client.get(
            f"{self.base_url}/api/v1/evaluation/user/{user_id}/history"
        )
        
        print(f"Status: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            print(f"Total evaluaciones: {len(result.get('evaluations', []))}")
            print(f"Estad√≠sticas: {json.dumps(result.get('statistics', {}), indent=2)}")
        else:
            print(f"‚ùå Error: {response.text}")
        
        return response.status_code == 200
    
    async def run_all_tests(self):
        """Ejecuta todas las pruebas."""
        print("üöÄ Iniciando pruebas del Servicio Ag√©ntico de Evaluaci√≥n...")
        print("=" * 60)
        
        # Verificar que el servicio est√© activo
        try:
            health_ok = await self.test_health()
            if not health_ok:
                print("\n‚ùå El servicio no est√° respondiendo correctamente")
                return
        except Exception as e:
            print(f"\n‚ùå Error conectando al servicio: {str(e)}")
            print("Aseg√∫rate de que el servicio est√© ejecut√°ndose en http://localhost:8003")
            return
        
        # Ejecutar todas las pruebas
        tests = [
            self.test_agentic_capabilities,
            self.test_evaluate_response,
            self.test_batch_evaluate,
            self.test_get_user_history
        ]
        
        for test in tests:
            try:
                await test()
            except Exception as e:
                print(f"\n‚ùå Error en prueba {test.__name__}: {str(e)}")
        
        print("\n" + "=" * 60)
        print("‚úÖ Pruebas completadas!")
    
    async def close(self):
        """Cierra el cliente HTTP."""
        await self.client.aclose()


async def main():
    """Funci√≥n principal."""
    tester = EvaluationTester()
    try:
        await tester.run_all_tests()
    finally:
        await tester.close()


if __name__ == "__main__":
    print("\nüìã SERVICIO DE EVALUACI√ìN AG√âNTICA - PRUEBAS")
    print("Aseg√∫rate de tener ejecut√°ndose:")
    print("1. LLM Orchestrator en http://localhost:8002")
    print("2. Servicio de Evaluaci√≥n en http://localhost:8003")
    print("\nPresiona Enter para continuar...")
    input()
    
    asyncio.run(main()) 